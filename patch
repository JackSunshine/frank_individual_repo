diff --git a/apps/vtn/vtnmgr/src/main/java/org/onosproject/vtn/cli/VtnCommand.java b/apps/vtn/vtnmgr/src/main/java/org/onosproject/vtn/cli/VtnCommand.java
index a88afae..93c6834 100644
--- a/apps/vtn/vtnmgr/src/main/java/org/onosproject/vtn/cli/VtnCommand.java
+++ b/apps/vtn/vtnmgr/src/main/java/org/onosproject/vtn/cli/VtnCommand.java
@@ -17,22 +17,243 @@ package org.onosproject.vtn.cli;
 
 import org.apache.karaf.shell.commands.Command;
 import org.apache.karaf.shell.commands.Option;
+import org.onlab.osgi.DefaultServiceDirectory;
+import org.onlab.osgi.ServiceDirectory;
+import org.onlab.packet.MacAddress;
 import org.onosproject.cli.AbstractShellCommand;
-import org.onosproject.vtn.manager.impl.VtnManager;
+import org.onosproject.core.ApplicationId;
+import org.onosproject.core.CoreService;
+import org.onosproject.net.Device;
+import org.onosproject.net.DeviceId;
+import org.onosproject.net.device.DeviceService;
+import org.onosproject.net.flow.DefaultFlowRule;
+import org.onosproject.net.flow.DefaultTrafficSelector;
+import org.onosproject.net.flow.DefaultTrafficTreatment;
+import org.onosproject.net.flow.FlowRule;
+import org.onosproject.net.flow.FlowRuleProgrammable;
+import org.onosproject.net.flow.criteria.PiCriterion;
+import org.onosproject.net.meter.Band;
+import org.onosproject.net.meter.DefaultBand;
+import org.onosproject.net.meter.DefaultMeter;
+import org.onosproject.net.meter.Meter;
+import org.onosproject.net.meter.MeterCellId;
+import org.onosproject.net.meter.MeterOperation;
+import org.onosproject.net.meter.MeterProgrammable;
+import org.onosproject.net.pi.model.PiActionId;
+import org.onosproject.net.pi.model.PiMatchFieldId;
+import org.onosproject.net.pi.model.PiMeterId;
+import org.onosproject.net.pi.model.PiTableId;
+import org.onosproject.net.pi.runtime.PiAction;
+import org.onosproject.net.pi.runtime.PiMatchKey;
+import org.onosproject.net.pi.runtime.PiMeterCellId;
+import org.onosproject.net.pi.runtime.PiTableAction;
+import org.onosproject.net.pi.runtime.PiTableEntry;
+import org.onosproject.net.pi.runtime.PiTernaryFieldMatch;
+
+import java.util.ArrayList;
+import java.util.Collection;
+
+import static org.onlab.util.ImmutableByteSequence.copyFrom;
+import static org.onlab.util.ImmutableByteSequence.ofOnes;
+import static org.onlab.util.ImmutableByteSequence.fit;
+import org.onlab.util.ImmutableByteSequence;
 
 /**
  * Supports for updating the external gateway virtualPort.
  */
-@Command(scope = "onos", name = "externalportname-set",
+@Command(scope = "onos", name = "p4-meter",
         description = "Supports for setting the external port name.")
 public class VtnCommand extends AbstractShellCommand {
 
-    @Option(name = "-n", aliases = "--name", description = "external port name.", required = true,
+    @Option(name = "-d", aliases = "--device", description = "external port name.", required = true,
+            multiValued = false)
+    String deviceId = "";
+
+    @Option(name = "-p", aliases = "--port", description = "external port name.", required = true,
+            multiValued = false)
+    String index = "";
+
+    @Option(name = "-i", aliases = "--ingress", description = "external port name.", required = true,
+            multiValued = false)
+    String ingressPort = "";
+
+    @Option(name = "-de", aliases = "--dest", description = "external port name.", required = true,
+            multiValued = false)
+    String dest = "";
+
+    @Option(name = "-sr", aliases = "--src", description = "external port name.", required = true,
+            multiValued = false)
+    String src = "";
+
+    @Option(name = "-r", aliases = "--rate", description = "external port name.", required = true,
+            multiValued = false)
+    String rate = "";
+
+    @Option(name = "-s", aliases = "--burst", description = "external port name.", required = true,
             multiValued = false)
-    String exPortName = "";
+    String burst = "";
 
     @Override
     protected void execute() {
-        VtnManager.setExPortName(exPortName);
+
+        ServiceDirectory serviceDirectory = new DefaultServiceDirectory();
+        DeviceService deviceService = serviceDirectory.get(DeviceService.class);
+        CoreService coreService = serviceDirectory.get(CoreService.class);
+
+        MeterProgrammable programmable;
+        Device device = deviceService.getDevice(DeviceId.deviceId(deviceId));
+        if (device.is(MeterProgrammable.class)) {
+            programmable = device.as(MeterProgrammable.class);
+        } else {
+            log.error("Device {} is not meter programmable", deviceId);
+            return;
+        }
+
+        try {
+            Collection<Meter> meters = programmable.getMeters().get();
+            log.info("The meter of device {}", meters);
+        } catch (Exception e) {
+            log.error("Exception occurred while get meters");
+            return;
+        }
+
+        if (!ingressPort.isEmpty()) {
+            ImmutableByteSequence inport;
+            ImmutableByteSequence inportMask;
+            try {
+                inport = fit(copyFrom(Short.valueOf(ingressPort)), 9);
+                inportMask = fit(copyFrom(0x01ff), 9);
+                log.warn("inportMask {}", inportMask);
+            } catch(Exception e) {
+                log.error("{}", e);
+                return;
+            }
+            PiTableEntry tableEntry = PiTableEntry.builder()
+                    .forTable(PiTableId.of("table0_control.table0"))
+                    .withMatchKey(PiMatchKey.builder()
+                                          .addFieldMatch(new PiTernaryFieldMatch(
+                                                  PiMatchFieldId.of("standard_metadata.ingress_port"),
+                                                  inport, inportMask))
+                                          .addFieldMatch(new PiTernaryFieldMatch(
+                                                  PiMatchFieldId.of("hdr.ethernet.src_addr"),
+                                                  copyFrom(MacAddress.valueOf(src).toBytes()), ofOnes(6)))
+                                          .addFieldMatch(new PiTernaryFieldMatch(
+                                                  PiMatchFieldId.of("hdr.ethernet.dst_addr"),
+                                                  copyFrom(MacAddress.valueOf(dest).toBytes()), ofOnes(6)))
+                                          .build())
+                    //.withTimeout(1000)
+                    .withPriority(100)
+                    .withAction(PiAction.builder().withId(PiActionId.of("_drop")).build())
+                    .withCookie(0xfff0323)
+                    .build();
+
+            MeterCellId entryCellId = PiMeterCellId.ofDirect(PiMeterId.of("table0_control.table0_meter"), tableEntry);
+
+            Collection<Band> bands = new ArrayList<Band>();
+            bands.add(DefaultBand.builder().ofType(Band.Type.NONE)
+                              .withRate(Long.valueOf(rate))
+                              .burstSize(Long.valueOf(burst))
+                              .build());
+            bands.add(DefaultBand.builder().ofType(Band.Type.NONE)
+                              .withRate(Long.valueOf(rate) + 10)
+                              .burstSize(Long.valueOf(burst) + 10)
+                              .build());
+            Meter meter = DefaultMeter.builder()
+                    .withCellId(entryCellId)
+                    .withBands(bands)
+                    .forDevice(DeviceId.deviceId(deviceId))
+                    .fromApp(coreService.getAppId("org.onosproject.app.vtn"))
+                    .build();
+
+            MeterOperation operation = new MeterOperation(meter, MeterOperation.Type.MODIFY);
+            try {
+                Boolean isSuccess = programmable.performMeterOperation(operation).get();
+                log.info("configure meter {}", isSuccess);
+            } catch (Exception e) {
+                log.error("Exception occurred while configure meters");
+                return;
+            }
+
+            FlowRuleProgrammable flowrule;
+            if (device.is(FlowRuleProgrammable.class)) {
+                flowrule = device.as(FlowRuleProgrammable.class);
+            } else {
+                log.error("Device {} is not flow rule programmable", deviceId);
+                return;
+            }
+            Collection<FlowRule> rules = new ArrayList<FlowRule>();
+            FlowRule rule = DefaultFlowRule.builder()
+                    .withSelector(DefaultTrafficSelector.builder()
+                                          .matchPi(PiCriterion.builder()
+                                                           .matchExact(PiMatchFieldId
+                                                                               .of("local_metadata.meter_tag"), 2)
+                                                           .build()).build())
+                    .withTreatment(DefaultTrafficTreatment.builder()
+                                           .piTableAction(PiAction.builder().withId(PiActionId.of("_drop")).build())
+                                           .build())
+                    .forTable(PiTableId.of("table0_control.filter"))
+                    .withPriority(1000)
+                    .makePermanent()
+                    .forDevice(DeviceId.deviceId(deviceId))
+                    .fromApp(coreService.getAppId("org.onosproject.app.vtn"))
+                    .build();
+            rules.add(rule);
+            flowrule.applyFlowRules(rules);
+
+        } else {
+            MeterCellId ingressCellId = PiMeterCellId.ofIndirect(PiMeterId.of("port_meters_ingress.ingress_port_meter"),
+                                                                 Long.valueOf(index));
+            MeterCellId ergressCellId = PiMeterCellId.ofIndirect(PiMeterId.of("port_meters_egress.egress_port_meter"),
+                                                                 Long.valueOf(index));
+            Collection<Band> bands = new ArrayList<Band>();
+            bands.add(DefaultBand.builder().ofType(Band.Type.NONE)
+                              .withRate(Long.valueOf(rate))
+                              .burstSize(Long.valueOf(burst))
+                              .build());
+            bands.add(DefaultBand.builder().ofType(Band.Type.NONE)
+                              .withRate(Long.valueOf(rate) + 10)
+                              .burstSize(Long.valueOf(burst) + 10)
+                              .build());
+            Meter meter1 = DefaultMeter.builder()
+                    .withCellId(ingressCellId)
+                    .withBands(bands)
+                    .forDevice(DeviceId.deviceId(deviceId))
+                    .fromApp(coreService.getAppId("org.onosproject.app.vtn"))
+                    .build();
+
+            Meter meter2 = DefaultMeter.builder()
+                    .withCellId(ergressCellId)
+                    .withBands(bands)
+                    .forDevice(DeviceId.deviceId(deviceId))
+                    .fromApp(coreService.getAppId("org.onosproject.app.vtn"))
+                    .build();
+
+            MeterOperation operation = new MeterOperation(meter1, MeterOperation.Type.MODIFY);
+            try {
+                Boolean isSuccess = programmable.performMeterOperation(operation).get();
+                log.info("configure meter {}", isSuccess);
+            } catch (Exception e) {
+                log.error("Exception occurred while configure meters");
+                return;
+            }
+
+            MeterOperation operation2 = new MeterOperation(meter2, MeterOperation.Type.MODIFY);
+            try {
+                Boolean isSuccess = programmable.performMeterOperation(operation2).get();
+                log.info("configure meter {}", isSuccess);
+            } catch (Exception e) {
+                log.error("Exception occurred while configure meters");
+                return;
+            }
+
+            try {
+                Collection<Meter> meters = programmable.getMeters().get();
+                log.info("The meter of device {}", meters);
+            } catch (Exception e) {
+                log.error("Exception occurred while get meters");
+                return;
+            }
+        }
+
     }
 }
diff --git a/drivers/p4runtime/src/main/java/org/onosproject/drivers/p4runtime/P4RuntimeMeterProgrammable.java b/drivers/p4runtime/src/main/java/org/onosproject/drivers/p4runtime/P4RuntimeMeterProgrammable.java
index 04654c8..ec92362 100644
--- a/drivers/p4runtime/src/main/java/org/onosproject/drivers/p4runtime/P4RuntimeMeterProgrammable.java
+++ b/drivers/p4runtime/src/main/java/org/onosproject/drivers/p4runtime/P4RuntimeMeterProgrammable.java
@@ -29,6 +29,7 @@ import org.onosproject.net.meter.MeterProgrammable;
 import org.onosproject.net.meter.MeterState;
 import org.onosproject.net.pi.model.PiMeterId;
 import org.onosproject.net.pi.model.PiMeterModel;
+import org.onosproject.net.pi.model.PiMeterType;
 import org.onosproject.net.pi.model.PiPipelineModel;
 import org.onosproject.net.pi.runtime.PiMeterCellConfig;
 import org.onosproject.net.pi.runtime.PiMeterHandle;
@@ -106,6 +107,7 @@ public class P4RuntimeMeterProgrammable extends AbstractP4RuntimeHandlerBehaviou
         ENTRY_LOCKS.getUnchecked(handle).lock();
         boolean result = false;
         try {
+            log.warn("I'm herer {}!\\n", piMeterCellConfig);
             if (client.writeMeterCells(newArrayList(piMeterCellConfig), pipeconf).get()) {
                 meterMirror.put(handle, piMeterCellConfig);
                 result = true;
@@ -131,7 +133,11 @@ public class P4RuntimeMeterProgrammable extends AbstractP4RuntimeHandlerBehaviou
 
         Set<PiMeterId> meterIds = new HashSet<>();
         for (PiMeterModel mode : pipelineModel.meters()) {
+            log.warn("mode is {}!", mode);
+            if (mode.meterType() == PiMeterType.DIRECT)
+                continue;
             meterIds.add(mode.id());
+            log.warn("meterIds {}", meterIds);
         }
 
         try {
@@ -158,4 +164,4 @@ public class P4RuntimeMeterProgrammable extends AbstractP4RuntimeHandlerBehaviou
 
         return CompletableFuture.completedFuture(meters);
     }
-}
\ No newline at end of file
+}
diff --git a/pipelines/basic/src/main/java/org/onosproject/pipelines/basic/BasicInterpreterImpl.java b/pipelines/basic/src/main/java/org/onosproject/pipelines/basic/BasicInterpreterImpl.java
index 8e7b399..f396a9d 100644
--- a/pipelines/basic/src/main/java/org/onosproject/pipelines/basic/BasicInterpreterImpl.java
+++ b/pipelines/basic/src/main/java/org/onosproject/pipelines/basic/BasicInterpreterImpl.java
@@ -38,6 +38,7 @@ import org.onosproject.net.pi.model.PiPipelineInterpreter;
 import org.onosproject.net.pi.model.PiTableId;
 import org.onosproject.net.pi.runtime.PiAction;
 import org.onosproject.net.pi.runtime.PiActionParam;
+import org.onosproject.net.pi.model.PiActionId;
 import org.onosproject.net.pi.runtime.PiControlMetadata;
 import org.onosproject.net.pi.runtime.PiPacketOperation;
 
@@ -128,7 +129,7 @@ public class BasicInterpreterImpl extends AbstractHandlerBehaviour
         if (!port.isLogical()) {
             try {
                 return PiAction.builder()
-                        .withId(ACT_SET_EGRESS_PORT_ID)
+                        .withId(PiActionId.of("table0_control.read_meter"))
                         .withParameter(new PiActionParam(ACT_PRM_PORT_ID,
                                                          fit(copyFrom(port.toLong()), PORT_BITWIDTH)))
                         .build();
diff --git a/pipelines/basic/src/main/resources/include/table0.p4 b/pipelines/basic/src/main/resources/include/table0.p4
index aea088a..e264d50 100644
--- a/pipelines/basic/src/main/resources/include/table0.p4
+++ b/pipelines/basic/src/main/resources/include/table0.p4
@@ -31,8 +31,8 @@ control table0_control(inout headers_t hdr,
         local_metadata.next_hop_id = next_hop_id;
     }
     
-    action read_meter(bit<9> meter_idx) {
-        standard_metadata.egress_spec = meter_idx;
+    action read_meter(bit<9> port) {
+        standard_metadata.egress_spec = port;
         table0_meter.read(local_metadata.meter_tag);
     }
     
@@ -71,6 +71,7 @@ control table0_control(inout headers_t hdr,
         size = 16;
         default_action = NoAction();
     }
+
     apply {
         table0.apply();
         filter.apply();
diff --git a/pipelines/basic/src/main/resources/p4c-out/bmv2/basic.json b/pipelines/basic/src/main/resources/p4c-out/bmv2/basic.json
index afee16c..0c4b569 100644
--- a/pipelines/basic/src/main/resources/p4c-out/bmv2/basic.json
+++ b/pipelines/basic/src/main/resources/p4c-out/bmv2/basic.json
@@ -694,7 +694,7 @@
       "id" : 8,
       "runtime_data" : [
         {
-          "name" : "meter_idx",
+          "name" : "port",
           "bitwidth" : 9
         }
       ],
@@ -715,7 +715,7 @@
             "filename" : "include/table0.p4",
             "line" : 35,
             "column" : 8,
-            "source_fragment" : "standard_metadata.egress_spec = meter_idx"
+            "source_fragment" : "standard_metadata.egress_spec = port"
           }
         }
       ]
diff --git a/pipelines/basic/src/main/resources/p4c-out/bmv2/basic.p4info b/pipelines/basic/src/main/resources/p4c-out/bmv2/basic.p4info
index f098581..15bc8eb 100644
--- a/pipelines/basic/src/main/resources/p4c-out/bmv2/basic.p4info
+++ b/pipelines/basic/src/main/resources/p4c-out/bmv2/basic.p4info
@@ -174,7 +174,7 @@ actions {
   }
   params {
     id: 1
-    name: "meter_idx"
+    name: "port"
     bitwidth: 9
   }
 }
diff --git a/web/gui/onos-gui-build b/web/gui/onos-gui-build
index b6ea278..cab7221 100755
--- a/web/gui/onos-gui-build
+++ b/web/gui/onos-gui-build
@@ -14,6 +14,7 @@ rm -f package-lock.json
 
 # Install Project Dependencies
 echo "Installing project dependencies"
+npm config set registry http://r.cnpmjs.org
 npm install --loglevel=error
 rm -f package-lock.json
 
